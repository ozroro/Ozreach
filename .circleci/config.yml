version: 2.1 
orbs:
  bundle-install: toshimaru/bundle-install@0.3.1
  aws-ecs: circleci/aws-ecs@1.1.0
  docker-layer-caching: shipchain/docker-layer-caching@1.0.0
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: ozroro/ozreach_rails
      DOCKERFILE_NAME: Dockerfile_production
    docker:
      - image: circleci/buildpack-deps:stretch
jobs: # ステップの集合
  rspec: # Workflows を使用しない実行では、エントリポイントとして `build` ジョブが必要
    parallelism: 3 # このジョブのインスタンスを 3つ並列実行します
    docker: 
      - image: circleci/ruby:2.6.5-node 
        environment: 
          BUNDLE_PATH: vendor/bundle
          DB_HOST: 127.0.0.1
          DB_USERNAME: 'root'
          DB_PASSWORD: ''
          RAILS_ENV: test
          SELENIUM_DRIVER_URL: http://localhost:4444/wd/hub
      - image: circleci/mysql:5.7
        environment:
          MYSQL_DATABASE: rails-test 
      - image: selenium/standalone-chrome
    steps: #
      - checkout 
      - run:
          name: ImageMagickインストール
          command: sudo apt-get update && sudo apt-get install -y imagemagick
      - bundle-install/bundle-install

      - restore_cache:
          keys:
            - rails-yarn-v1-{{ checksum "yarn.lock" }}
            - rails-yarn-v1-
      - run:
          name: Yarn をインストール
          command: yarn install --cache-folder ~/.cache/yarn
      - save_cache:
          key: rails-yarn-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: DB を待機
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: データベースをセットアップ
          command: bin/rails db:schema:load --trace

      - run:
          name: RSpec を並列実行
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)


      - store_test_results: # テストサマリー (https://circleci.com/docs/ja/2.0/collect-test-data/) に表示するテスト結果をアップロードします
          path: test_results
      # デプロイコンフィグの例については https://circleci.com/docs/ja/2.0/deployment-integrations/ を参照してください
  build-and-publish:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - docker-layer-caching/restore_dlc:
          lockfile: "Gemfile.lock"
      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME:latest --build-arg SECRET_KEY_BASE=$SECRET_KEY_BASE .
      - docker-layer-caching/save_dlc:
          image: "$IMAGE_NAME:latest"
          stage: "stage"
          lockfile: "Gemfile.lock"
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest

workflows:
  version: 2
  build-master:
    jobs:
      - rspec
      - build-and-publish:
          requires:
            - rspec
          filters:
            branches:
              only: master
      - aws-ecs/deploy-service-update:
          requires:
            - build-and-publish
          family: '${MY_APP_PREFIX}_WebServer'
          cluster-name: '${MY_APP_PREFIX}'
          service-name: '${MY_APP_PREFIX}'
          container-image-name-updates: 'container=${MY_APP_PREFIX}_rails,tag=latest'