version: 2.1 
orbs:
  bundle-install: toshimaru/bundle-install@0.3.1
  aws-ecs: circleci/aws-ecs@1.1.0

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: ozroro/ozreach_rails
      DOCKERFILE_NAME: Dockerfile_production
    docker:
      - image: circleci/buildpack-deps:stretch

# ----------------- DIY Docker Layer Caching from here --------
commands:
  restore_dlc:
    parameters:
      dockerfile:
        type: string
        default: "Dockerfile"
      lockfile:
        type: string
        default: "Gemifile.lock"
    steps:
      - run:
          name: Check if there are newer base images on Docker Hub
          command: |
            BASE_IMAGE_NAMES=$(grep "^FROM" <<parameters.dockerfile>> | cut -d' ' -f2 | uniq)
            cp <<parameters.dockerfile>> docker-layer-caching-key.txt
            for n in $BASE_IMAGE_NAMES; do

              if grep -q ':' \<<< "$n"; then
                REPOSITORY=$(cut -d':' -f1 \<<< "$n")
                TAG=$(cut -d':' -f2 \<<< "$n")
              else
                continue  # ignore multi-stage aliases
              fi

              # If there is no slash in the repo name, it is an official image,
              # we will need to prepend library/ to it
              if ! grep -q '/' \<<< "$REPOSITORY"; then
                REPOSITORY="library/$REPOSITORY"
              fi

              # Source: https://stackoverflow.com/questions/41808763/how-to-determine-the-docker-image-id-for-a-tag-via-docker-hub-api
              TOKEN=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:$REPOSITORY:pull" | jq -r .token)
              IMAGE_DIGEST=$(curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.docker.distribution.manifest.v2+json" https://index.docker.io/v2/$REPOSITORY/manifests/$TAG | jq -r .config.digest)

              # Append the newfound IDs to form the key
              echo $IMAGE_DIGEST >> docker-layer-caching-key.txt
            done
      - restore_cache:
          keys:
            - docker-layers-{{ checksum "docker-layer-caching-key.txt" }}
            - docker-layers-{{ checksum "docker-layer-caching-key.txt" }}-{{ checksum "<< parameters.lockfile >>" }}
      - run:
          name: Load Docker layer cache
          command: |
            # credits to: https://blog.jondh.me.uk/2018/04/strategies-for-docker-layer-caching-in-circleci/
            set +o pipefail
            if [ -f /home/circleci/docker-caches/${CIRCLE_PROJECT_REPONAME}.tar.gz ]; then
              gunzip -c /home/circleci/docker-caches/${CIRCLE_PROJECT_REPONAME}.tar.gz | docker load;
              docker images;
            fi
  save_dlc:
    parameters:
      dockerfile:
        type: string
        default: "Dockerfile"
      lockfile:
        type: string
        default: "Gemifile.lock"
      image_name:
        type: string
      arg:
        type: string
        default: "NON_ARG=1"

    steps:
      - run:
          name: Save Docker layer cache
          command: |
            mkdir -p /home/circleci/docker-caches
            docker build \
              -f << parameters.dockerfile >> \
              --tag << parameters.image_name >> \
              --build-arg << parameters.arg >> . \
              | grep '\-\-\->' \
              | grep -v 'Using cache' \
              | sed -e 's/[ >-]//g' > /tmp/layers.txt
            docker save $(cat /tmp/layers.txt) | gzip > /home/circleci/docker-caches/${CIRCLE_PROJECT_REPONAME}.tar.gz
      - save_cache:
          key: docker-layers-{{ checksum "docker-layer-caching-key.txt" }}
          paths:
            - /home/circleci/docker-caches
      - save_cache:
          key: docker-layers-{{ checksum "docker-layer-caching-key.txt" }}-{{ checksum "<< parameters.lockfile >>" }}
          paths:
            - /home/circleci/docker-caches
    
# ----------------- DIY Docker Layer Caching to here --------


jobs: # ステップの集合
  rspec: # Workflows を使用しない実行では、エントリポイントとして `build` ジョブが必要
    parallelism: 3 # このジョブのインスタンスを 3つ並列実行します
    docker: 
      - image: circleci/ruby:2.6.5-node 
        environment: 
          BUNDLE_PATH: vendor/bundle
          DB_HOST: 127.0.0.1
          DB_USERNAME: 'root'
          DB_PASSWORD: ''
          RAILS_ENV: test
          SELENIUM_DRIVER_URL: http://localhost:4444/wd/hub
      - image: circleci/mysql:5.7
        environment:
          MYSQL_DATABASE: rails-test 
      - image: selenium/standalone-chrome
    steps: #
      - checkout 
      - run:
          name: ImageMagickインストール
          command: sudo apt-get update && sudo apt-get install -y imagemagick
      - bundle-install/bundle-install

      - restore_cache:
          keys:
            - rails-yarn-v1-{{ checksum "yarn.lock" }}
            - rails-yarn-v1-
      - run:
          name: Yarn をインストール
          command: yarn install --cache-folder ~/.cache/yarn
      - save_cache:
          key: rails-yarn-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: DB を待機
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: データベースをセットアップ
          command: bin/rails db:schema:load --trace

      - run:
          name: RSpec を並列実行
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)


      - store_test_results: # テストサマリー (https://circleci.com/docs/ja/2.0/collect-test-data/) に表示するテスト結果をアップロードします
          path: test_results
      # デプロイコンフィグの例については https://circleci.com/docs/ja/2.0/deployment-integrations/ を参照してください
  build-and-publish:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - restore_dlc
      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME:latest --build-arg SECRET_KEY_BASE=$SECRET_KEY_BASE .
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
      - save_dlc:
          image_name: "$IMAGE_NAME:latest"
          arg: "SECRET_KEY_BASE=$SECRET_KEY_BASE"


workflows:
  version: 2
  build-master:
    jobs:
      - rspec
      - build-and-publish:
          requires:
            - rspec
          filters:
            branches:
              only: master
      - aws-ecs/deploy-service-update:
          requires:
            - build-and-publish
          family: '${MY_APP_PREFIX}_WebServer'
          cluster-name: '${MY_APP_PREFIX}'
          service-name: '${MY_APP_PREFIX}'
          container-image-name-updates: 'container=${MY_APP_PREFIX}_rails,tag=latest'